{
  "address": "0x3569d10634f43CfBf3CcFE306223651933b13e73",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "ampBps",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPool",
          "type": "uint256"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "governmentFeeBps",
          "type": "uint16"
        }
      ],
      "name": "SetFeeConfiguration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeToSetter",
          "type": "address"
        }
      ],
      "name": "SetFeeToSetter",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "ampBps",
          "type": "uint32"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeConfiguration",
      "outputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_governmentFeeBps",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPoolAtIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_tokenPools",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "getPoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getUnamplifiedPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "isPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_governmentFeeBps",
          "type": "uint16"
        }
      ],
      "name": "setFeeConfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x349236bd4509e757683b75e85cafa2b5a4d19679a0be804cc0d977bd85bed14d",
  "receipt": {
    "to": null,
    "from": "0x7e31BBf761C360cDf9887133E650c4f5989b4A16",
    "contractAddress": "0x3569d10634f43CfBf3CcFE306223651933b13e73",
    "transactionIndex": 7,
    "gasUsed": "5270112",
    "logsBloom": "0x
    "blockHash": "0xd0f8d332b555d58591f3507765894d05d2e3618f3144fe45e1054fbf41f33d9c",
    "transactionHash": "0x349236bd4509e757683b75e85cafa2b5a4d19679a0be804cc0d977bd85bed14d",
    "logs": [],
    "blockNumber": 10941693,
    "cumulativeGasUsed": "13233400",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7e31BBf761C360cDf9887133E650c4f5989b4A16"
  ],
  "numDeployments": 1,
  "solcInputHash": "14f14d9fe89e453eddb0455134ce8023",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ampBps\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPool\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"governmentFeeBps\",\"type\":\"uint16\"}],\"name\":\"SetFeeConfiguration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToSetter\",\"type\":\"address\"}],\"name\":\"SetFeeToSetter\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ampBps\",\"type\":\"uint32\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeConfiguration\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_governmentFeeBps\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPoolAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenPools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getUnamplifiedPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_governmentFeeBps\",\"type\":\"uint16\"}],\"name\":\"setFeeConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DMMFactory.sol\":\"DMMFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/DMMFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\nimport \\\"./interfaces/IDMMFactory.sol\\\";\\nimport \\\"./DMMPool.sol\\\";\\n\\ncontract DMMFactory is IDMMFactory {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    uint256 internal constant BPS = 10000;\\n\\n    address private feeTo;\\n    uint16 private governmentFeeBps;\\n    address public override feeToSetter;\\n\\n    mapping(IERC20 => mapping(IERC20 => EnumerableSet.AddressSet)) internal tokenPools;\\n    mapping(IERC20 => mapping(IERC20 => address)) public override getUnamplifiedPool;\\n    address[] public override allPools;\\n\\n    event PoolCreated(\\n        IERC20 indexed token0,\\n        IERC20 indexed token1,\\n        address pool,\\n        uint32 ampBps,\\n        uint256 totalPool\\n    );\\n    event SetFeeConfiguration(address feeTo, uint16 governmentFeeBps);\\n    event SetFeeToSetter(address feeToSetter);\\n\\n    constructor(address _feeToSetter) public {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function createPool(\\n        IERC20 tokenA,\\n        IERC20 tokenB,\\n        uint32 ampBps\\n    ) external override returns (address pool) {\\n        require(tokenA != tokenB, \\\"DMM: IDENTICAL_ADDRESSES\\\");\\n        (IERC20 token0, IERC20 token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(address(token0) != address(0), \\\"DMM: ZERO_ADDRESS\\\");\\n        require(ampBps >= BPS, \\\"DMM: INVALID_BPS\\\");\\n        // only exist 1 unamplified pool of a pool.\\n        require(\\n            ampBps != BPS || getUnamplifiedPool[token0][token1] == address(0),\\n            \\\"DMM: UNAMPLIFIED_POOL_EXISTS\\\"\\n        );\\n        pool = address(new DMMPool());\\n        DMMPool(pool).initialize(token0, token1, ampBps);\\n        // populate mapping in the reverse direction\\n        tokenPools[token0][token1].add(pool);\\n        tokenPools[token1][token0].add(pool);\\n        if (ampBps == BPS) {\\n            getUnamplifiedPool[token0][token1] = pool;\\n            getUnamplifiedPool[token1][token0] = pool;\\n        }\\n        allPools.push(pool);\\n\\n        emit PoolCreated(token0, token1, pool, ampBps, allPools.length);\\n    }\\n\\n    function setFeeConfiguration(address _feeTo, uint16 _governmentFeeBps) external override {\\n        require(msg.sender == feeToSetter, \\\"DMM: FORBIDDEN\\\");\\n        require(_governmentFeeBps > 0 && _governmentFeeBps < 2000, \\\"DMM: INVALID FEE\\\");\\n        feeTo = _feeTo;\\n        governmentFeeBps = _governmentFeeBps;\\n\\n        emit SetFeeConfiguration(_feeTo, _governmentFeeBps);\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external override {\\n        require(msg.sender == feeToSetter, \\\"DMM: FORBIDDEN\\\");\\n        feeToSetter = _feeToSetter;\\n\\n        emit SetFeeToSetter(_feeToSetter);\\n    }\\n\\n    function getFeeConfiguration()\\n        external\\n        override\\n        view\\n        returns (address _feeTo, uint16 _governmentFeeBps)\\n    {\\n        _feeTo = feeTo;\\n        _governmentFeeBps = governmentFeeBps;\\n    }\\n\\n    function allPoolsLength() external override view returns (uint256) {\\n        return allPools.length;\\n    }\\n\\n    function getPools(IERC20 token0, IERC20 token1)\\n        external\\n        override\\n        view\\n        returns (address[] memory _tokenPools)\\n    {\\n        uint256 length = tokenPools[token0][token1].length();\\n        _tokenPools = new address[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            _tokenPools[i] = tokenPools[token0][token1].at(i);\\n        }\\n    }\\n\\n    function getPoolsLength(IERC20 token0, IERC20 token1) external view returns (uint256) {\\n        return tokenPools[token0][token1].length();\\n    }\\n\\n    function getPoolAtIndex(\\n        IERC20 token0,\\n        IERC20 token1,\\n        uint256 index\\n    ) external view returns (address pool) {\\n        return tokenPools[token0][token1].at(index);\\n    }\\n\\n    function isPool(\\n        IERC20 token0,\\n        IERC20 token1,\\n        address pool\\n    ) external override view returns (bool) {\\n        return tokenPools[token0][token1].contains(pool);\\n    }\\n}\\n\",\"keccak256\":\"0xaa1a4096b626ddeab840d93bc4438364dd80b7f1b5041c5d6184966abbf154d4\",\"license\":\"BUSL-1.1\"},\"contracts/DMMPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./libraries/MathExt.sol\\\";\\nimport \\\"./libraries/FeeFomula.sol\\\";\\nimport \\\"./libraries/ERC20Permit.sol\\\";\\n\\nimport \\\"./interfaces/IDMMFactory.sol\\\";\\nimport \\\"./interfaces/IDMMCallee.sol\\\";\\nimport \\\"./interfaces/IDMMPool.sol\\\";\\nimport \\\"./interfaces/IERC20Metadata.sol\\\";\\nimport \\\"./VolumeTrendRecorder.sol\\\";\\n\\ncontract DMMPool is IDMMPool, ERC20Permit, ReentrancyGuard, VolumeTrendRecorder {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant MAX_UINT112 = 2**112 - 1;\\n    uint256 internal constant BPS = 10000;\\n\\n    struct ReserveData {\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 vReserve0;\\n        uint256 vReserve1; // only used when isAmpPool = true\\n    }\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    /// @dev To make etherscan auto-verify new pool, these variables are not immutable\\n    IDMMFactory public override factory;\\n    IERC20 public override token0;\\n    IERC20 public override token1;\\n\\n    /// @dev uses single storage slot, accessible via getReservesData\\n    uint112 internal reserve0;\\n    uint112 internal reserve1;\\n    uint32 public override ampBps;\\n    /// @dev addition param only when amplification factor > 1\\n    uint112 internal vReserve0;\\n    uint112 internal vReserve1;\\n\\n    /// @dev vReserve0 * vReserve1, as of immediately after the most recent liquidity event\\n    uint256 public override kLast;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to,\\n        uint256 feeInPrecision\\n    );\\n    event Sync(uint256 vReserve0, uint256 vReserve1, uint256 reserve0, uint256 reserve1);\\n\\n    constructor() public ERC20Permit(\\\"KyberDMM LP\\\", \\\"DMM-LP\\\", \\\"1\\\") VolumeTrendRecorder(0) {\\n        factory = IDMMFactory(msg.sender);\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(\\n        IERC20 _token0,\\n        IERC20 _token1,\\n        uint32 _ampBps\\n    ) external {\\n        require(msg.sender == address(factory), \\\"DMM: FORBIDDEN\\\");\\n        token0 = _token0;\\n        token1 = _token1;\\n        ampBps = _ampBps;\\n    }\\n\\n    /// @dev this low-level function should be called from a contract\\n    ///                 which performs important safety checks\\n    function mint(address to) external override nonReentrant returns (uint256 liquidity) {\\n        (bool isAmpPool, ReserveData memory data) = getReservesData();\\n        ReserveData memory _data;\\n        _data.reserve0 = token0.balanceOf(address(this));\\n        _data.reserve1 = token1.balanceOf(address(this));\\n        uint256 amount0 = _data.reserve0.sub(data.reserve0);\\n        uint256 amount1 = _data.reserve1.sub(data.reserve1);\\n\\n        bool feeOn = _mintFee(isAmpPool, data);\\n        uint256 _totalSupply = totalSupply(); // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            if (isAmpPool) {\\n                uint32 _ampBps = ampBps;\\n                _data.vReserve0 = _data.reserve0.mul(_ampBps) / BPS;\\n                _data.vReserve1 = _data.reserve1.mul(_ampBps) / BPS;\\n            }\\n            liquidity = MathExt.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n            _mint(address(-1), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(\\n                amount0.mul(_totalSupply) / data.reserve0,\\n                amount1.mul(_totalSupply) / data.reserve1\\n            );\\n            if (isAmpPool) {\\n                uint256 b = liquidity.add(_totalSupply);\\n                _data.vReserve0 = Math.max(data.vReserve0.mul(b) / _totalSupply, _data.reserve0);\\n                _data.vReserve1 = Math.max(data.vReserve1.mul(b) / _totalSupply, _data.reserve1);\\n            }\\n        }\\n        require(liquidity > 0, \\\"DMM: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n\\n        _update(isAmpPool, _data);\\n        if (feeOn) kLast = getK(isAmpPool, _data);\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    /// @dev this low-level function should be called from a contract\\n    /// @dev which performs important safety checks\\n    /// @dev user must transfer LP token to this contract before call burn\\n    function burn(address to)\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256 amount0, uint256 amount1)\\n    {\\n        (bool isAmpPool, ReserveData memory data) = getReservesData(); // gas savings\\n        IERC20 _token0 = token0; // gas savings\\n        IERC20 _token1 = token1; // gas savings\\n\\n        uint256 balance0 = _token0.balanceOf(address(this));\\n        uint256 balance1 = _token1.balanceOf(address(this));\\n        require(balance0 >= data.reserve0 && balance1 >= data.reserve1, \\\"DMM: UNSYNC_RESERVES\\\");\\n        uint256 liquidity = balanceOf(address(this));\\n\\n        bool feeOn = _mintFee(isAmpPool, data);\\n        uint256 _totalSupply = totalSupply(); // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 || amount1 > 0, \\\"DMM: INSUFFICIENT_LIQUIDITY_BURNED\\\");\\n        _burn(address(this), liquidity);\\n        if (amount0 > 0) _token0.safeTransfer(to, amount0);\\n        if (amount1 > 0) _token1.safeTransfer(to, amount1);\\n        ReserveData memory _data;\\n        _data.reserve0 = _token0.balanceOf(address(this));\\n        _data.reserve1 = _token1.balanceOf(address(this));\\n        if (isAmpPool) {\\n            uint256 b = Math.min(\\n                _data.reserve0.mul(_totalSupply) / data.reserve0,\\n                _data.reserve1.mul(_totalSupply) / data.reserve1\\n            );\\n            _data.vReserve0 = Math.max(data.vReserve0.mul(b) / _totalSupply, _data.reserve0);\\n            _data.vReserve1 = Math.max(data.vReserve1.mul(b) / _totalSupply, _data.reserve1);\\n        }\\n        _update(isAmpPool, _data);\\n        if (feeOn) kLast = getK(isAmpPool, _data); // data are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    /// @dev this low-level function should be called from a contract\\n    /// @dev which performs important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata callbackData\\n    ) external override nonReentrant {\\n        require(amount0Out > 0 || amount1Out > 0, \\\"DMM: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        (bool isAmpPool, ReserveData memory data) = getReservesData(); // gas savings\\n        require(\\n            amount0Out < data.reserve0 && amount1Out < data.reserve1,\\n            \\\"DMM: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n\\n        ReserveData memory newData;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            IERC20 _token0 = token0;\\n            IERC20 _token1 = token1;\\n            require(to != address(_token0) && to != address(_token1), \\\"DMM: INVALID_TO\\\");\\n            if (amount0Out > 0) _token0.safeTransfer(to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _token1.safeTransfer(to, amount1Out); // optimistically transfer tokens\\n            if (callbackData.length > 0)\\n                IDMMCallee(to).dmmSwapCall(msg.sender, amount0Out, amount1Out, callbackData);\\n            newData.reserve0 = _token0.balanceOf(address(this));\\n            newData.reserve1 = _token1.balanceOf(address(this));\\n            if (isAmpPool) {\\n                newData.vReserve0 = data.vReserve0.add(newData.reserve0).sub(data.reserve0);\\n                newData.vReserve1 = data.vReserve1.add(newData.reserve1).sub(data.reserve1);\\n            }\\n        }\\n        uint256 amount0In = newData.reserve0 > data.reserve0 - amount0Out\\n            ? newData.reserve0 - (data.reserve0 - amount0Out)\\n            : 0;\\n        uint256 amount1In = newData.reserve1 > data.reserve1 - amount1Out\\n            ? newData.reserve1 - (data.reserve1 - amount1Out)\\n            : 0;\\n        require(amount0In > 0 || amount1In > 0, \\\"DMM: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        uint256 feeInPrecision = verifyBalanceAndUpdateEma(\\n            amount0In,\\n            amount1In,\\n            isAmpPool ? data.vReserve0 : data.reserve0,\\n            isAmpPool ? data.vReserve1 : data.reserve1,\\n            isAmpPool ? newData.vReserve0 : newData.reserve0,\\n            isAmpPool ? newData.vReserve1 : newData.reserve1\\n        );\\n\\n        _update(isAmpPool, newData);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to, feeInPrecision);\\n    }\\n\\n    /// @dev force balances to match reserves\\n    function skim(address to) external nonReentrant {\\n        token0.safeTransfer(to, token0.balanceOf(address(this)).sub(reserve0));\\n        token1.safeTransfer(to, token1.balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    /// @dev force reserves to match balances\\n    function sync() external override nonReentrant {\\n        (bool isAmpPool, ReserveData memory data) = getReservesData();\\n        bool feeOn = _mintFee(isAmpPool, data);\\n        ReserveData memory newData;\\n        newData.reserve0 = IERC20(token0).balanceOf(address(this));\\n        newData.reserve1 = IERC20(token1).balanceOf(address(this));\\n        // update virtual reserves if this is amp pool\\n        if (isAmpPool) {\\n            uint256 _totalSupply = totalSupply();\\n            uint256 b = Math.min(\\n                newData.reserve0.mul(_totalSupply) / data.reserve0,\\n                newData.reserve1.mul(_totalSupply) / data.reserve1\\n            );\\n            newData.vReserve0 = Math.max(data.vReserve0.mul(b) / _totalSupply, newData.reserve0);\\n            newData.vReserve1 = Math.max(data.vReserve1.mul(b) / _totalSupply, newData.reserve1);\\n        }\\n        _update(isAmpPool, newData);\\n        if (feeOn) kLast = getK(isAmpPool, newData);\\n    }\\n\\n    /// @dev returns data to calculate amountIn, amountOut\\n    function getTradeInfo()\\n        external\\n        virtual\\n        override\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint112 _vReserve0,\\n            uint112 _vReserve1,\\n            uint256 feeInPrecision\\n        )\\n    {\\n        // gas saving to read reserve data\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        uint32 _ampBps = ampBps;\\n        _vReserve0 = vReserve0;\\n        _vReserve1 = vReserve1;\\n        if (_ampBps == BPS) {\\n            _vReserve0 = _reserve0;\\n            _vReserve1 = _reserve1;\\n        }\\n        uint256 rFactorInPrecision = getRFactor(block.number);\\n        feeInPrecision = getFinalFee(FeeFomula.getFee(rFactorInPrecision), _ampBps);\\n    }\\n\\n    /// @dev returns reserve data to calculate amount to add liquidity\\n    function getReserves() external override view returns (uint112 _reserve0, uint112 _reserve1) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n    }\\n\\n    function name() public override view returns (string memory) {\\n        IERC20Metadata _token0 = IERC20Metadata(address(token0));\\n        IERC20Metadata _token1 = IERC20Metadata(address(token1));\\n        return string(abi.encodePacked(\\\"KyberDMM LP \\\", _token0.symbol(), \\\"-\\\", _token1.symbol()));\\n    }\\n\\n    function symbol() public override view returns (string memory) {\\n        IERC20Metadata _token0 = IERC20Metadata(address(token0));\\n        IERC20Metadata _token1 = IERC20Metadata(address(token1));\\n        return string(abi.encodePacked(\\\"DMM-LP \\\", _token0.symbol(), \\\"-\\\", _token1.symbol()));\\n    }\\n\\n    function verifyBalanceAndUpdateEma(\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 beforeReserve0,\\n        uint256 beforeReserve1,\\n        uint256 afterReserve0,\\n        uint256 afterReserve1\\n    ) internal virtual returns (uint256 feeInPrecision) {\\n        // volume = beforeReserve0 * amount1In / beforeReserve1 + amount0In (normalized into amount in token 0)\\n        uint256 volume = beforeReserve0.mul(amount1In).div(beforeReserve1).add(amount0In);\\n        uint256 rFactorInPrecision = recordNewUpdatedVolume(block.number, volume);\\n        feeInPrecision = getFinalFee(FeeFomula.getFee(rFactorInPrecision), ampBps);\\n        // verify balance update matches with fomula\\n        uint256 balance0Adjusted = afterReserve0.mul(PRECISION);\\n        balance0Adjusted = balance0Adjusted.sub(amount0In.mul(feeInPrecision));\\n        balance0Adjusted = balance0Adjusted / PRECISION;\\n        uint256 balance1Adjusted = afterReserve1.mul(PRECISION);\\n        balance1Adjusted = balance1Adjusted.sub(amount1In.mul(feeInPrecision));\\n        balance1Adjusted = balance1Adjusted / PRECISION;\\n        require(\\n            balance0Adjusted.mul(balance1Adjusted) >= beforeReserve0.mul(beforeReserve1),\\n            \\\"DMM: K\\\"\\n        );\\n    }\\n\\n    /// @dev update reserves\\n    function _update(bool isAmpPool, ReserveData memory data) internal {\\n        reserve0 = safeUint112(data.reserve0);\\n        reserve1 = safeUint112(data.reserve1);\\n        if (isAmpPool) {\\n            assert(data.vReserve0 >= data.reserve0 && data.vReserve1 >= data.reserve1); // never happen\\n            vReserve0 = safeUint112(data.vReserve0);\\n            vReserve1 = safeUint112(data.vReserve1);\\n        }\\n        emit Sync(data.vReserve0, data.vReserve1, data.reserve0, data.reserve1);\\n    }\\n\\n    /// @dev if fee is on, mint liquidity equivalent to configured fee of the growth in sqrt(k)\\n    function _mintFee(bool isAmpPool, ReserveData memory data) internal returns (bool feeOn) {\\n        (address feeTo, uint16 governmentFeeBps) = factory.getFeeConfiguration();\\n        feeOn = feeTo != address(0);\\n        uint256 _kLast = kLast; // gas savings\\n        uint256 _vReserve0 = isAmpPool ? data.vReserve0 : data.reserve0; // gas savings\\n        uint256 _vReserve1 = isAmpPool ? data.vReserve1 : data.reserve1; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint256 collectedFee0;\\n                uint256 _tmp = _kLast * _vReserve0;\\n                if (_tmp / _vReserve0 == _kLast) {\\n                    collectedFee0 = _vReserve0.sub(MathExt.sqrt(_tmp.div(_vReserve1)));\\n                } else {\\n                    collectedFee0 = _vReserve0.sub(\\n                        MathExt.sqrt(_kLast.div(_vReserve1).mul(_vReserve0))\\n                    );\\n                }\\n                uint256 poolValueInToken0 = data.reserve0.add(\\n                    data.reserve1.mul(_vReserve0).div(_vReserve1)\\n                );\\n                uint256 numerator = totalSupply().mul(collectedFee0).mul(governmentFeeBps);\\n                uint256 denominator = (poolValueInToken0.sub(collectedFee0)).mul(5000);\\n                uint256 liquidity = numerator / denominator;\\n                if (liquidity > 0) _mint(feeTo, liquidity);\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    /// @dev gas saving to read reserve data\\n    function getReservesData() internal view returns (bool isAmpPool, ReserveData memory data) {\\n        data.reserve0 = reserve0;\\n        data.reserve1 = reserve1;\\n        isAmpPool = ampBps != BPS;\\n        if (isAmpPool) {\\n            data.vReserve0 = vReserve0;\\n            data.vReserve1 = vReserve1;\\n        }\\n    }\\n\\n    function getFinalFee(uint256 feeInPrecision, uint32 _ampBps) internal pure returns (uint256) {\\n        if (_ampBps <= 20000) {\\n            return feeInPrecision;\\n        } else if (_ampBps <= 50000) {\\n            return (feeInPrecision * 20) / 30;\\n        } else if (_ampBps <= 200000) {\\n            return (feeInPrecision * 10) / 30;\\n        } else {\\n            return (feeInPrecision * 4) / 30;\\n        }\\n    }\\n\\n    function getK(bool isAmpPool, ReserveData memory data) internal pure returns (uint256) {\\n        return isAmpPool ? data.vReserve0 * data.vReserve1 : data.reserve0 * data.reserve1;\\n    }\\n\\n    function safeUint112(uint256 x) internal pure returns (uint112) {\\n        require(x <= MAX_UINT112, \\\"DMM: OVERFLOW\\\");\\n        return uint112(x);\\n    }\\n}\\n\",\"keccak256\":\"0x48df114722c8371a5e54cf6a5f73278ca3c7b09e0a6bf2a9f1aee6e2cf3f41a5\",\"license\":\"BUSL-1.1\"},\"contracts/VolumeTrendRecorder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.6.12;\\n\\nimport \\\"./libraries/MathExt.sol\\\";\\n\\n/// @dev contract to calculate volume trend. See secion 3.1 in the white paper\\n/// @dev EMA stands for Exponential moving average\\n/// @dev https://en.wikipedia.org/wiki/Moving_average\\ncontract VolumeTrendRecorder {\\n    using MathExt for uint256;\\n    using SafeMath for uint256;\\n\\n    uint256 private constant MAX_UINT128 = 2**128 - 1;\\n    uint256 internal constant PRECISION = 10**18;\\n    uint256 private constant SHORT_ALPHA = (2 * PRECISION) / 5401;\\n    uint256 private constant LONG_ALPHA = (2 * PRECISION) / 10801;\\n\\n    uint128 internal shortEMA;\\n    uint128 internal longEMA;\\n    // total volume in current block\\n    uint128 internal currentBlockVolume;\\n    uint128 internal lastTradeBlock;\\n\\n    event UpdateEMA(uint256 shortEMA, uint256 longEMA, uint128 lastBlockVolume, uint256 skipBlock);\\n\\n    constructor(uint128 _emaInit) public {\\n        shortEMA = _emaInit;\\n        longEMA = _emaInit;\\n        lastTradeBlock = safeUint128(block.number);\\n    }\\n\\n    function getVolumeTrendData()\\n        external\\n        view\\n        returns (\\n            uint128 _shortEMA,\\n            uint128 _longEMA,\\n            uint128 _currentBlockVolume,\\n            uint128 _lastTradeBlock\\n        )\\n    {\\n        _shortEMA = shortEMA;\\n        _longEMA = longEMA;\\n        _currentBlockVolume = currentBlockVolume;\\n        _lastTradeBlock = lastTradeBlock;\\n    }\\n\\n    /// @dev records a new trade, update ema and returns current rFactor for this trade\\n    /// @return rFactor in Precision for this trade\\n    function recordNewUpdatedVolume(uint256 blockNumber, uint256 value)\\n        internal\\n        returns (uint256)\\n    {\\n        // this can not be underflow because block.number always increases\\n        uint256 skipBlock = blockNumber - lastTradeBlock;\\n        if (skipBlock == 0) {\\n            currentBlockVolume = safeUint128(\\n                uint256(currentBlockVolume).add(value),\\n                \\\"volume exceeds valid range\\\"\\n            );\\n            return calculateRFactor(uint256(shortEMA), uint256(longEMA));\\n        }\\n        uint128 _currentBlockVolume = currentBlockVolume;\\n        uint256 _shortEMA = newEMA(shortEMA, SHORT_ALPHA, currentBlockVolume);\\n        uint256 _longEMA = newEMA(longEMA, LONG_ALPHA, currentBlockVolume);\\n        // ema = ema * (1-aplha) ^(skipBlock -1)\\n        _shortEMA = _shortEMA.mulInPrecision(\\n            (PRECISION - SHORT_ALPHA).unsafePowInPrecision(skipBlock - 1)\\n        );\\n        _longEMA = _longEMA.mulInPrecision(\\n            (PRECISION - LONG_ALPHA).unsafePowInPrecision(skipBlock - 1)\\n        );\\n        shortEMA = safeUint128(_shortEMA);\\n        longEMA = safeUint128(_longEMA);\\n        currentBlockVolume = safeUint128(value);\\n        lastTradeBlock = safeUint128(blockNumber);\\n\\n        emit UpdateEMA(_shortEMA, _longEMA, _currentBlockVolume, skipBlock);\\n\\n        return calculateRFactor(_shortEMA, _longEMA);\\n    }\\n\\n    /// @return rFactor in Precision for this trade\\n    function getRFactor(uint256 blockNumber) internal view returns (uint256) {\\n        // this can not be underflow because block.number always increases\\n        uint256 skipBlock = blockNumber - lastTradeBlock;\\n        if (skipBlock == 0) {\\n            return calculateRFactor(shortEMA, longEMA);\\n        }\\n        uint256 _shortEMA = newEMA(shortEMA, SHORT_ALPHA, currentBlockVolume);\\n        uint256 _longEMA = newEMA(longEMA, LONG_ALPHA, currentBlockVolume);\\n        _shortEMA = _shortEMA.mulInPrecision(\\n            (PRECISION - SHORT_ALPHA).unsafePowInPrecision(skipBlock - 1)\\n        );\\n        _longEMA = _longEMA.mulInPrecision(\\n            (PRECISION - LONG_ALPHA).unsafePowInPrecision(skipBlock - 1)\\n        );\\n        return calculateRFactor(_shortEMA, _longEMA);\\n    }\\n\\n    function calculateRFactor(uint256 _shortEMA, uint256 _longEMA)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_longEMA == 0) {\\n            return 0;\\n        }\\n        return (_shortEMA * MathExt.PRECISION) / _longEMA;\\n    }\\n\\n    /// @dev return newEMA value\\n    /// @param ema previous ema value in wei\\n    /// @param alpha in Precicion (required < Precision)\\n    /// @param value current value to update ema\\n    /// @dev ema and value is uint128 and alpha < Percison\\n    /// @dev so this function can not overflow and returned ema is not overflow uint128\\n    function newEMA(\\n        uint128 ema,\\n        uint256 alpha,\\n        uint128 value\\n    ) internal pure returns (uint256) {\\n        assert(alpha < PRECISION);\\n        return ((PRECISION - alpha) * uint256(ema) + alpha * uint256(value)) / PRECISION;\\n    }\\n\\n    function safeUint128(uint256 v) internal pure returns (uint128) {\\n        require(v <= MAX_UINT128, \\\"overflow uint128\\\");\\n        return uint128(v);\\n    }\\n\\n    function safeUint128(uint256 v, string memory errorMessage) internal pure returns (uint128) {\\n        require(v <= MAX_UINT128, errorMessage);\\n        return uint128(v);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d630b015b54113348ed6af478a195833ac51d81130a6a206a7b082d6a3a144\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDMMCallee.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.6.12;\\n\\ninterface IDMMCallee {\\n    function dmmSwapCall(\\n        address sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x009abd177434aa796efaf81895dc4ccae1c560a8efc1d5f384111d50f0f6c8ab\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDMMFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDMMFactory {\\n    function createPool(\\n        IERC20 tokenA,\\n        IERC20 tokenB,\\n        uint32 ampBps\\n    ) external returns (address pool);\\n\\n    function setFeeConfiguration(address feeTo, uint16 governmentFeeBps) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function getFeeConfiguration() external view returns (address feeTo, uint16 governmentFeeBps);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function allPools(uint256) external view returns (address pool);\\n\\n    function allPoolsLength() external view returns (uint256);\\n\\n    function getUnamplifiedPool(IERC20 token0, IERC20 token1) external view returns (address);\\n\\n    function getPools(IERC20 token0, IERC20 token1)\\n        external\\n        view\\n        returns (address[] memory _tokenPools);\\n\\n    function isPool(\\n        IERC20 token0,\\n        IERC20 token1,\\n        address pool\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaf05b0c4268e91e0fffbf3fcf5b5d576c158286cb4728c425c61c6bbb0aa4928\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDMMPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IDMMFactory.sol\\\";\\n\\ninterface IDMMPool {\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function sync() external;\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1);\\n\\n    function getTradeInfo()\\n        external\\n        view\\n        returns (\\n            uint112 _vReserve0,\\n            uint112 _vReserve1,\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint256 feeInPrecision\\n        );\\n\\n    function token0() external view returns (IERC20);\\n\\n    function token1() external view returns (IERC20);\\n\\n    function ampBps() external view returns (uint32);\\n\\n    function factory() external view returns (IDMMFactory);\\n\\n    function kLast() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x23505c507f0ea1f1de7d1485570b011783e7f8cf66112a1b990e539e23bc739b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x45ce1e29b70a27a960485d625c50913723beb8a25aab997396913d1bf081598c\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Permit is IERC20 {\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x981d27fd0e8a22e69bd58e0a3583b450d620ceeff80bf9db723ed0dfbab3c085\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"../interfaces/IERC20Permit.sol\\\";\\n\\n/// @dev https://eips.ethereum.org/EIPS/eip-2612\\ncontract ERC20Permit is ERC20, IERC20Permit {\\n    /// @dev To make etherscan auto-verify new pool, this variable is not immutable\\n    bytes32 public domainSeparator;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32\\n        public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory version\\n    ) public ERC20(name, symbol) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        domainSeparator = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(deadline >= block.timestamp, \\\"ERC20Permit: EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator,\\n                keccak256(\\n                    abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline)\\n                )\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"ERC20Permit: INVALID_SIGNATURE\\\"\\n        );\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x953b5c559ee6c54ac8a2bb525f458d1a4bf23992b2b7d9b8de13e903b40c3cfd\",\"license\":\"MIT\"},\"contracts/libraries/FeeFomula.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.6.12;\\n\\nimport \\\"./MathExt.sol\\\";\\n\\nlibrary FeeFomula {\\n    using SafeMath for uint256;\\n    using MathExt for uint256;\\n\\n    uint256 private constant PRECISION = 10**18;\\n    uint256 private constant R0 = 1477405064814996100; // 1.4774050648149961\\n\\n    uint256 private constant C0 = (60 * PRECISION) / 10000;\\n\\n    uint256 private constant A = uint256(PRECISION * 20000) / 27;\\n    uint256 private constant B = uint256(PRECISION * 250) / 9;\\n    uint256 private constant C1 = uint256(PRECISION * 985) / 27;\\n    uint256 private constant U = (120 * PRECISION) / 100;\\n\\n    uint256 private constant G = (836 * PRECISION) / 1000;\\n    uint256 private constant F = 5 * PRECISION;\\n    uint256 private constant L = (2 * PRECISION) / 10000;\\n    // C2 = 25 * PRECISION - (F * (PRECISION - G)**2) / ((PRECISION - G)**2 + L * PRECISION)\\n    uint256 private constant C2 = 20036905816356657810;\\n\\n    /// @dev calculate fee from rFactorInPrecision, see section 3.2 in dmmSwap white paper\\n    /// @dev fee in [15, 60] bps\\n    /// @return fee percentage in Precision\\n    function getFee(uint256 rFactorInPrecision) internal pure returns (uint256) {\\n        if (rFactorInPrecision >= R0) {\\n            return C0;\\n        } else if (rFactorInPrecision >= PRECISION) {\\n            // C1 + A * (r-U)^3 + b * (r -U)\\n            if (rFactorInPrecision > U) {\\n                uint256 tmp = rFactorInPrecision - U;\\n                uint256 tmp3 = tmp.unsafePowInPrecision(3);\\n                return (C1.add(A.mulInPrecision(tmp3)).add(B.mulInPrecision(tmp))) / 10000;\\n            } else {\\n                uint256 tmp = U - rFactorInPrecision;\\n                uint256 tmp3 = tmp.unsafePowInPrecision(3);\\n                return C1.sub(A.mulInPrecision(tmp3)).sub(B.mulInPrecision(tmp)) / 10000;\\n            }\\n        } else {\\n            // [ C2 + sign(r - G) *  F * (r-G) ^2 / (L + (r-G) ^2) ] / 10000\\n            uint256 tmp = (\\n                rFactorInPrecision > G ? (rFactorInPrecision - G) : (G - rFactorInPrecision)\\n            );\\n            tmp = tmp.unsafePowInPrecision(2);\\n            uint256 tmp2 = F.mul(tmp).div(tmp.add(L));\\n            if (rFactorInPrecision > G) {\\n                return C2.add(tmp2) / 10000;\\n            } else {\\n                return C2.sub(tmp2) / 10000;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x882e27f6217cf937ec22f358f6251e9b37ef1e7b29852f16acdf440db2a8164e\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/MathExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary MathExt {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant PRECISION = (10**18);\\n\\n    /// @dev Returns x*y in precision\\n    function mulInPrecision(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x.mul(y) / PRECISION;\\n    }\\n\\n    /// @dev source: dsMath\\n    /// @param xInPrecision should be < PRECISION, so this can not overflow\\n    /// @return zInPrecision = (x/PRECISION) ^k * PRECISION\\n    function unsafePowInPrecision(uint256 xInPrecision, uint256 k)\\n        internal\\n        pure\\n        returns (uint256 zInPrecision)\\n    {\\n        require(xInPrecision <= PRECISION, \\\"MathExt: x > PRECISION\\\");\\n        zInPrecision = k % 2 != 0 ? xInPrecision : PRECISION;\\n\\n        for (k /= 2; k != 0; k /= 2) {\\n            xInPrecision = (xInPrecision * xInPrecision) / PRECISION;\\n\\n            if (k % 2 != 0) {\\n                zInPrecision = (zInPrecision * xInPrecision) / PRECISION;\\n            }\\n        }\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1714c8896c197ec862337e55b7742a1ab0d06082a9f19fd52e2c6cce7f720a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051615ee3380380615ee38339818101604052602081101561003357600080fd5b5051600180546001600160a01b0319166001600160a01b03909216919091179055615e80806100636000396000f3fe60806040523480156200001157600080fd5b5060043610620000e85760003560e01c806365da9289116200008d578063ad5cb2e11162000063578063ad5cb2e11462000369578063eb787f6114620003a6578063efde4e64146200040257620000e8565b806365da928914620002a05780638fd6484014620002e6578063a2e74af6146200033357620000e8565b806341d1de9711620000c357806341d1de9714620001a0578063538633df14620001c05780635b1dc86f146200021057620000e8565b8063094b741514620000ed5780632900909d14620001205780633d82497e1462000162575b600080fd5b620000f76200040c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b62000160600480360360408110156200013857600080fd5b50803573ffffffffffffffffffffffffffffffffffffffff16906020013561ffff1662000428565b005b620000f7600480360360408110156200017a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516620005f9565b620000f760048036036020811015620001b857600080fd5b50356200062c565b620001fe60048036036040811015620001d857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351662000661565b60408051918252519081900360200190f35b6200024e600480360360408110156200022857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516620006a9565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156200028c57818101518382015260200162000272565b505050509050019250505060405180910390f35b620000f760048036036060811015620002b857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135620007c1565b620000f760048036036060811015620002fe57600080fd5b50803573ffffffffffffffffffffffffffffffffffffffff908116916020810135909116906040013563ffffffff1662000809565b62000160600480360360208110156200034b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662000d51565b6200037362000e51565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835261ffff90911660208301528051918290030190f35b620003ee60048036036060811015620003be57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101358216916040909101351662000e8c565b604080519115158252519081900360200190f35b620001fe62000ecc565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff163314620004af57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f444d4d3a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b60008161ffff16118015620004c957506107d08161ffff16105b6200053557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f444d4d3a20494e56414c49442046454500000000000000000000000000000000604482015290519081900360640190fd5b6000805461ffff83167401000000000000000000000000000000000000000081027fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff87167fffffffffffffffffffffffff00000000000000000000000000000000000000009094168417161790925560408051918252602082019290925281517fce65ee4e1b50c25affcecb736ecf577b5c46ff900efade2a6214267a8707628e929181900390910190a15050565b600360209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b600481815481106200063a57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526002602090815260408083209385168352929052908120620006a09062000ed2565b90505b92915050565b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600260209081526040808320938516835292905290812060609190620006ec9062000ed2565b90508067ffffffffffffffff811180156200070657600080fd5b5060405190808252806020026020018201604052801562000731578160200160208202803683370190505b50915060005b81811015620007b95773ffffffffffffffffffffffffffffffffffffffff80861660009081526002602090815260408083209388168352929052206200077e908262000edf565b8382815181106200078b57fe5b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260010162000737565b505092915050565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600260209081526040808320938616835292905290812062000801908362000edf565b949350505050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415620008a757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f444d4d3a204944454e544943414c5f4144445245535345530000000000000000604482015290519081900360640190fd5b6000808473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1610620008e6578486620008e9565b85855b909250905073ffffffffffffffffffffffffffffffffffffffff82166200097157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f444d4d3a205a45524f5f41444452455353000000000000000000000000000000604482015290519081900360640190fd5b6127108463ffffffff161015620009e957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f444d4d3a20494e56414c49445f42505300000000000000000000000000000000604482015290519081900360640190fd5b6127108463ffffffff1614158062000a33575073ffffffffffffffffffffffffffffffffffffffff8281166000908152600360209081526040808320858516845290915290205416155b62000a9f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f444d4d3a20554e414d504c49464945445f504f4f4c5f45584953545300000000604482015290519081900360640190fd5b60405162000aad9062001021565b604051809103906000f08015801562000aca573d6000803e3d6000fd5b5092508273ffffffffffffffffffffffffffffffffffffffff16636ecf2b228383876040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018263ffffffff1681526020019350505050600060405180830381600087803b15801562000b6357600080fd5b505af115801562000b78573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff808416600090815260026020908152604080832093861683529290522062000bba91508462000eed565b5073ffffffffffffffffffffffffffffffffffffffff808216600090815260026020908152604080832093861683529290522062000bf9908462000eed565b506127108463ffffffff16141562000c845773ffffffffffffffffffffffffffffffffffffffff8083166000818152600360208181526040808420878716855282528084208054968a167fffffffffffffffffffffffff0000000000000000000000000000000000000000978816811790915592825280842094845293905291902080549092161790555b6004805460018101825560008290527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805473ffffffffffffffffffffffffffffffffffffffff8087167fffffffffffffffffffffffff0000000000000000000000000000000000000000909216821790925591546040805193845263ffffffff88166020850152838101919091525183821692918516917ffc574402c445e75f2b79b67884ff9c662244dce454c5ae68935fcd0bebb7c8ff919081900360600190a350509392505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331462000dd857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f444d4d3a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915560408051918252517f66330d9620e4f36ed52d5f7b79fa819b71c33037004c3889a3601b06c68da7cc9181900360200190a150565b60005473ffffffffffffffffffffffffffffffffffffffff8116917401000000000000000000000000000000000000000090910461ffff1690565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600260209081526040808320938616835292905290812062000801908362000f11565b60045490565b6000620006a38262000f35565b6000620006a0838362000f39565b6000620006a08373ffffffffffffffffffffffffffffffffffffffff841662000fba565b6000620006a08373ffffffffffffffffffffffffffffffffffffffff841662001009565b5490565b8154600090821062000f97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018062005e296022913960400191505060405180910390fd5b82600001828154811062000fa757fe5b9060005260206000200154905092915050565b600062000fc8838362001009565b6200100057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620006a3565b506000620006a3565b60009081526001919091016020526040902054151590565b614df980620010308339019056fe60806040523480156200001157600080fd5b5060006040518060400160405280600b81526020016a04b79626572444d4d204c560ac1b815250604051806040016040528060068152602001650444d4d2d4c560d41b815250604051806040016040528060018152602001603160f81b815250828281600390805190602001906200008b929190620001ee565b508051620000a1906004906020840190620001ee565b50506005805460ff19166012179055508251602093840120815191840191909120604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818701528082019390935260608301919091524660808301523060a0808401919091528151808403909101815260c09092019052805192019190912060065550600160085560098054600160801b6001600160801b038085169182026001600160801b03199093169190911716179055620001624362000198565b600a80546001600160801b03928316600160801b02921691909117905550600b80546001600160a01b0319163317905562000280565b60006001600160801b03821115620001ea576040805162461bcd60e51b815260206004820152601060248201526f0deeccae4ccd8deee40ead2dce86264760831b604482015290519081900360640190fd5b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023157805160ff191683800117855562000261565b8280016001018555821562000261579182015b828111156200026157825182559160200191906001019062000244565b50620001ea9291505b80821115620001ea57600081556001016200026a565b614b6980620002906000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80637464fc3d11610104578063bc25cf77116100a2578063d669402711610071578063d669402714610736578063dd62ed3e14610780578063f698da25146107bb578063fff6cae9146107c3576101da565b8063bc25cf7714610695578063c45a0155146106c8578063d21220a7146106d0578063d505accf146106d8576101da565b806395d89b41116100de57806395d89b4114610613578063a457c2d71461061b578063a9059cbb14610654578063ba9a7a561461068d576101da565b80637464fc3d1461058c5780637ecebe001461059457806389afcb44146105c7576101da565b806323b872dd1161017c57806349386b161161014b57806349386b16146104bb5780636a627842146104dc5780636ecf2b221461050f57806370a0823114610559576101da565b806323b872dd1461041957806330adf81f1461045c578063313ce567146104645780633950935114610482576101da565b8063095ea7b3116101b8578063095ea7b31461033c5780630d94d50b146103895780630dfe1681146103ce57806318160ddd146103ff576101da565b8063022c0d9f146101df57806306fdde031461027a5780630902f1ac146102f7575b600080fd5b610278600480360360808110156101f557600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013516919081019060808101606082013564010000000081111561023957600080fd5b82018360208201111561024b57600080fd5b8035906020019184600183028401116401000000008311171561026d57600080fd5b5090925090506107cb565b005b610282610e6a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102bc5781810151838201526020016102a4565b50505050905090810190601f1680156102e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102ff611282565b60405180836dffffffffffffffffffffffffffff168152602001826dffffffffffffffffffffffffffff1681526020019250505060405180910390f35b6103756004803603604081101561035257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356112af565b604080519115158252519081900360200190f35b6103916112cd565b604080516fffffffffffffffffffffffffffffffff9586168152938516602085015291841683830152909216606082015290519081900360800190f35b6103d661130c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610407611328565b60408051918252519081900360200190f35b6103756004803603606081101561042f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013561132e565b6104076113d0565b61046c6113f4565b6040805160ff9092168252519081900360200190f35b6103756004803603604081101561049857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356113fd565b6104c3611458565b6040805163ffffffff9092168252519081900360200190f35b610407600480360360208110156104f257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611484565b6102786004803603606081101561052557600080fd5b50803573ffffffffffffffffffffffffffffffffffffffff908116916020810135909116906040013563ffffffff166118f4565b6104076004803603602081101561056f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611a22565b610407611a4e565b610407600480360360208110156105aa57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611a54565b6105fa600480360360208110156105dd57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611a66565b6040805192835260208301919091528051918290030190f35b61028261204f565b6103756004803603604081101561063157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135612397565b6103756004803603604081101561066a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561240c565b610407612420565b610278600480360360208110156106ab57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612426565b6103d6612648565b6103d6612664565b610278600480360360e08110156106ee57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135612680565b61073e61294c565b604080516dffffffffffffffffffffffffffff968716815294861660208601529285168484015293166060830152608082019290925290519081900360a00190f35b6104076004803603604081101561079657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166129e8565b610407612a20565b610278612a26565b6002600854141561083d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600855841515806108505750600084115b6108bb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f444d4d3a20494e53554646494349454e545f4f55545055545f414d4f554e5400604482015290519081900360640190fd5b60006108c5614912565b6108cd612ce3565b80519193509150871080156108e55750806020015186105b61095057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f444d4d3a20494e53554646494349454e545f4c49515549444954590000000000604482015290519081900360640190fd5b610958614912565b600c54600d5473ffffffffffffffffffffffffffffffffffffffff9182169190811690881682148015906109b857508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614155b610a2357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f444d4d3a20494e56414c49445f544f0000000000000000000000000000000000604482015290519081900360640190fd5b8915610a4a57610a4a73ffffffffffffffffffffffffffffffffffffffff8316898c612d87565b8815610a7157610a7173ffffffffffffffffffffffffffffffffffffffff8216898b612d87565b8515610b3d578773ffffffffffffffffffffffffffffffffffffffff166381279c7e338c8c8b8b6040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610b2457600080fd5b505af1158015610b38573d6000803e3d6000fd5b505050505b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b158015610ba957600080fd5b505afa158015610bbd573d6000803e3d6000fd5b505050506040513d6020811015610bd357600080fd5b50518352604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8316916370a08231916024808301926020929190829003018186803b158015610c4357600080fd5b505afa158015610c57573d6000803e3d6000fd5b505050506040513d6020811015610c6d57600080fd5b505160208401528415610cc157835183516040860151610c989291610c929190612e19565b90612e8d565b6040840152602080850151908401516060860151610cbb9291610c929190612e19565b60608401525b5050815181516000918a900310610cd9576000610ce4565b82518251908a900390035b9050600088846020015103836020015111610d00576000610d0e565b888460200151038360200151035b90506000821180610d1f5750600081115b610d8a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f444d4d3a20494e53554646494349454e545f494e5055545f414d4f554e540000604482015290519081900360640190fd5b6000610de4838388610d9d578751610da3565b87604001515b89610db2578860200151610db8565b88606001515b8a610dc4578851610dca565b88604001515b8b610dd9578960200151610ddf565b89606001515b612f04565b9050610df08685613069565b60408051848152602081018490528082018d9052606081018c905260808101839052905173ffffffffffffffffffffffffffffffffffffffff8b169133917f606ecd02b3e3b4778f8e97b2e03351de14224efaa5fa64e62200afc9395c24999181900360a00190a350506001600855505050505050505050565b600c54600d54604080517f95d89b41000000000000000000000000000000000000000000000000000000008152905160609373ffffffffffffffffffffffffffffffffffffffff90811693169183916395d89b4191600480820192600092909190829003018186803b158015610edf57600080fd5b505afa158015610ef3573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526020811015610f3a57600080fd5b8101908080516040519392919084640100000000821115610f5a57600080fd5b908301906020820185811115610f6f57600080fd5b8251640100000000811182820188101715610f8957600080fd5b82525081516020918201929091019080838360005b83811015610fb6578181015183820152602001610f9e565b50505050905090810190601f168015610fe35780820380516001836020036101000a031916815260200191505b506040525050508173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561103057600080fd5b505afa158015611044573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561108b57600080fd5b81019080805160405193929190846401000000008211156110ab57600080fd5b9083019060208201858111156110c057600080fd5b82516401000000008111828201881017156110da57600080fd5b82525081516020918201929091019080838360005b838110156111075781810151838201526020016110ef565b50505050905090810190601f1680156111345780820380516001836020036101000a031916815260200191505b5060405250505060405160200180807f4b79626572444d4d204c50200000000000000000000000000000000000000000815250600c0183805190602001908083835b602083106111b357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611176565b6001836020036101000a038019825116818451168082178552505050505050905001807f2d0000000000000000000000000000000000000000000000000000000000000081525060010182805190602001908083835b6020831061124657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611209565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529250505090565b600e546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000009092041690565b60006112c36112bc613204565b8484613208565b5060015b92915050565b600954600a546fffffffffffffffffffffffffffffffff8083169370010000000000000000000000000000000093849004821693838316930490911690565b600c5473ffffffffffffffffffffffffffffffffffffffff1681565b60025490565b600061133b84848461334f565b6113c584611347613204565b6113c085604051806060016040528060288152602001614a316028913973ffffffffffffffffffffffffffffffffffffffff8a16600090815260016020526040812090611392613204565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002054919061351f565b613208565b5060015b9392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60055460ff1690565b60006112c361140a613204565b846113c0856001600061141b613204565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c168152925290205490612e19565b600e547c0100000000000000000000000000000000000000000000000000000000900463ffffffff1681565b6000600260085414156114f857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026008556000611507614912565b61150f612ce3565b9150915061151b614912565b600c54604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561158c57600080fd5b505afa1580156115a0573d6000803e3d6000fd5b505050506040513d60208110156115b657600080fd5b50518152600d54604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561162b57600080fd5b505afa15801561163f573d6000803e3d6000fd5b505050506040513d602081101561165557600080fd5b505160208201528151815160009161166d9190612e8d565b9050600061168c84602001518460200151612e8d90919063ffffffff16565b9050600061169a86866135d0565b905060006116a6611328565b90508061177457861561172957600e54855163ffffffff7c0100000000000000000000000000000000000000000000000000000000909204821691612710916116f19184906137b516565b816116f857fe5b04604087015260208601516127109061171a9063ffffffff808516906137b516565b8161172157fe5b046060870152505b6117416103e8610c9261173c87876137b5565b613828565b975061176f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6103e8613879565b611827565b85516117b19061178486846137b5565b8161178b57fe5b0487602001516117a484876137b590919063ffffffff16565b816117ab57fe5b046139aa565b975086156118275760006117c58983612e19565b90506117f4826117e2838a604001516137b590919063ffffffff16565b816117e957fe5b0487600001516139c0565b6040870152606087015161182090839061180e90846137b5565b8161181557fe5b0487602001516139c0565b6060870152505b60008811611880576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180614a596022913960400191505060405180910390fd5b61188a8989613879565b6118948786613069565b81156118a8576118a487866139d0565b6010555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600855509395945050505050565b600b5473ffffffffffffffffffffffffffffffffffffffff16331461197a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f444d4d3a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600c805473ffffffffffffffffffffffffffffffffffffffff9485167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600d805493909416921691909117909155600e805463ffffffff9092167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260409020545b919050565b60105481565b60076020526000908152604090205481565b60008060026008541415611adb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026008556000611aea614912565b611af2612ce3565b600c54600d54604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905194965092945073ffffffffffffffffffffffffffffffffffffffff9182169391169160009184916370a08231916024808301926020929190829003018186803b158015611b7357600080fd5b505afa158015611b87573d6000803e3d6000fd5b505050506040513d6020811015611b9d57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916370a08231916024808301926020929190829003018186803b158015611c1157600080fd5b505afa158015611c25573d6000803e3d6000fd5b505050506040513d6020811015611c3b57600080fd5b505185519091508210801590611c55575084602001518110155b611cc057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f444d4d3a20554e53594e435f5245534552564553000000000000000000000000604482015290519081900360640190fd5b6000611ccb30611a22565b90506000611cd988886135d0565b90506000611ce5611328565b905080611cf284876137b5565b81611cf957fe5b049a5080611d0784866137b5565b81611d0e57fe5b04995060008b1180611d20575060008a115b611d75576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806149ee6022913960400191505060405180910390fd5b611d7f30846139f6565b8a15611da657611da673ffffffffffffffffffffffffffffffffffffffff88168d8d612d87565b8915611dcd57611dcd73ffffffffffffffffffffffffffffffffffffffff87168d8c612d87565b611dd5614912565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8a16916370a08231916024808301926020929190829003018186803b158015611e4157600080fd5b505afa158015611e55573d6000803e3d6000fd5b505050506040513d6020811015611e6b57600080fd5b50518152604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8916916370a08231916024808301926020929190829003018186803b158015611edb57600080fd5b505afa158015611eef573d6000803e3d6000fd5b505050506040513d6020811015611f0557600080fd5b505160208201528915611fad5788518151600091611f4b91611f2790866137b5565b81611f2e57fe5b048b602001516117a48686602001516137b590919063ffffffff16565b9050611f7a83611f68838d604001516137b590919063ffffffff16565b81611f6f57fe5b0483600001516139c0565b604083015260608a0151611fa6908490611f9490846137b5565b81611f9b57fe5b0483602001516139c0565b6060830152505b611fb78a82613069565b8215611fcb57611fc78a826139d0565b6010555b8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968e8e604051808381526020018281526020019250505060405180910390a3505050505050505050506001600881905550915091565b600c54600d54604080517f95d89b41000000000000000000000000000000000000000000000000000000008152905160609373ffffffffffffffffffffffffffffffffffffffff90811693169183916395d89b4191600480820192600092909190829003018186803b1580156120c457600080fd5b505afa1580156120d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561211f57600080fd5b810190808051604051939291908464010000000082111561213f57600080fd5b90830190602082018581111561215457600080fd5b825164010000000081118282018810171561216e57600080fd5b82525081516020918201929091019080838360005b8381101561219b578181015183820152602001612183565b50505050905090810190601f1680156121c85780820380516001836020036101000a031916815260200191505b506040525050508173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561221557600080fd5b505afa158015612229573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561227057600080fd5b810190808051604051939291908464010000000082111561229057600080fd5b9083019060208201858111156122a557600080fd5b82516401000000008111828201881017156122bf57600080fd5b82525081516020918201929091019080838360005b838110156122ec5781810151838201526020016122d4565b50505050905090810190601f1680156123195780820380516001836020036101000a031916815260200191505b5060405250505060405160200180807f444d4d2d4c5020000000000000000000000000000000000000000000000000008152506007018380519060200190808383602083106111b357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611176565b60006112c36123a4613204565b846113c085604051806060016040528060258152602001614b0f60259139600160006123ce613204565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d1681529252902054919061351f565b60006112c3612419613204565b848461334f565b6103e881565b6002600854141561249857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600855600e54600c54604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905161257f93859361255f936dffffffffffffffffffffffffffff9092169273ffffffffffffffffffffffffffffffffffffffff909116916370a08231916024808301926020929190829003018186803b15801561252d57600080fd5b505afa158015612541573d6000803e3d6000fd5b505050506040513d602081101561255757600080fd5b505190612e8d565b600c5473ffffffffffffffffffffffffffffffffffffffff169190612d87565b600e54600d54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051612640938593612620936e0100000000000000000000000000009092046dffffffffffffffffffffffffffff169273ffffffffffffffffffffffffffffffffffffffff909116916370a08231916024808301926020929190829003018186803b15801561252d57600080fd5b600d5473ffffffffffffffffffffffffffffffffffffffff169190612d87565b506001600855565b600b5473ffffffffffffffffffffffffffffffffffffffff1681565b600d5473ffffffffffffffffffffffffffffffffffffffff1681565b428410156126ef57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f45524332305065726d69743a2045585049524544000000000000000000000000604482015290519081900360640190fd5b60065473ffffffffffffffffffffffffffffffffffffffff80891660008181526007602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa158015612850573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158015906128cb57508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b61293657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f45524332305065726d69743a20494e56414c49445f5349474e41545552450000604482015290519081900360640190fd5b612941898989613208565b505050505050505050565b600e54600f546dffffffffffffffffffffffffffff808316926e0100000000000000000000000000008082048316938381169391900416906000907c0100000000000000000000000000000000000000000000000000000000900463ffffffff166127108114156129be578593508492505b60006129c943613b40565b90506129dd6129d782613ce4565b83613ec5565b925050509091929394565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60065481565b60026008541415612a9857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026008556000612aa7614912565b612aaf612ce3565b915091506000612abf83836135d0565b9050612ac9614912565b600c54604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015612b3a57600080fd5b505afa158015612b4e573d6000803e3d6000fd5b505050506040513d6020811015612b6457600080fd5b50518152600d54604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015612bd957600080fd5b505afa158015612bed573d6000803e3d6000fd5b505050506040513d6020811015612c0357600080fd5b505160208201528315612cba576000612c1a611328565b84518351919250600091612c579190612c3390856137b5565b81612c3a57fe5b0486602001516117a48587602001516137b590919063ffffffff16565b9050612c8682612c748388604001516137b590919063ffffffff16565b81612c7b57fe5b0484600001516139c0565b60408401526060850151612cb2908390612ca090846137b5565b81612ca757fe5b0484602001516139c0565b606084015250505b612cc48482613069565b8115612cd857612cd484826139d0565b6010555b505060016008555050565b6000612ced614912565b600e546dffffffffffffffffffffffffffff80821683526e010000000000000000000000000000820416602083015263ffffffff7c0100000000000000000000000000000000000000000000000000000000909104166127101480159250612d8357600f546dffffffffffffffffffffffffffff80821660408401526e0100000000000000000000000000009091041660608201525b9091565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052612e14908490613f21565b505050565b6000828201838110156113c957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082821115612efe57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600080612f2588612f1f87612f198a8c6137b5565b90613ff9565b90612e19565b90506000612f33438361407a565b9050612f6f612f4182613ce4565b600e547c0100000000000000000000000000000000000000000000000000000000900463ffffffff16613ec5565b92506000612f8586670de0b6b3a76400006137b5565b9050612f9b612f948b866137b5565b8290612e8d565b9050670de0b6b3a7640000810490506000612fbe86670de0b6b3a76400006137b5565b9050612fcd612f948b876137b5565b670de0b6b3a764000090049050612fe489896137b5565b612fee83836137b5565b101561305b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f444d4d3a204b0000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b505050509695505050505050565b8051613074906143cd565b600e80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff9290921691909117905560208101516130c1906143cd565b600e806101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff16021790555081156131ac57805160408201511080159061311757508060200151816060015110155b61311d57fe5b61312a81604001516143cd565b600f80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff929092169190911790556060810151613177906143cd565b600f600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff1602179055505b6040808201516060808401518451602080870151865195865290850192909252838501529082015290517f2f9d55abfefdfd4c3a83e00a1b419b3c2fe4b83100c559f0e2213e57f6e0bba99181900360800190a15050565b3390565b73ffffffffffffffffffffffffffffffffffffffff8316613274576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180614ac16024913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166132e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806149806022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff83166133bb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180614a9c6025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216613427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061493b6023913960400191505060405180910390fd5b613432838383612e14565b61347c816040518060600160405280602681526020016149a26026913973ffffffffffffffffffffffffffffffffffffffff8616600090815260208190526040902054919061351f565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526020819052604080822093909355908416815220546134b89082612e19565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156135c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561358d578181015183820152602001613575565b50505050905090810190601f1680156135ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000806000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5cb2e16040518163ffffffff1660e01b8152600401604080518083038186803b15801561363c57600080fd5b505afa158015613650573d6000803e3d6000fd5b505050506040513d604081101561366657600080fd5b50805160209091015160105473ffffffffffffffffffffffffffffffffffffffff83161515955091935091506000866136a05785516136a6565b85604001515b90506000876136b95786602001516136bf565b86606001515b9050851561379e578215613799576000838302848482816136dc57fe5b041415613701576136fa6136f361173c8386613ff9565b8590612e8d565b915061371e565b61371b6136f361173c866137158988613ff9565b906137b5565b91505b600061374661373e85612f19888e602001516137b590919063ffffffff16565b8b5190612e19565b9050600061375e8861ffff1661371586613715611328565b905060006137726113886137158588612e8d565b9050600081838161377f57fe5b0490508015613792576137928b82613879565b5050505050505b6137aa565b82156137aa5760006010555b505050505092915050565b6000826137c4575060006112c7565b828202828482816137d157fe5b04146113c9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180614a106021913960400191505060405180910390fd5b6000600382111561386b575080600160028204015b818110156138655780915060028182858161385457fe5b04018161385d57fe5b04905061383d565b50611a49565b8115611a4957506001919050565b73ffffffffffffffffffffffffffffffffffffffff82166138fb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61390760008383612e14565b6002546139149082612e19565b60025573ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260409020546139479082612e19565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106139b957816113c9565b5090919050565b6000818310156139b957816113c9565b6000826139e45760208201518251026113c9565b50606081015160409091015102919050565b73ffffffffffffffffffffffffffffffffffffffff8216613a62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180614a7b6021913960400191505060405180910390fd5b613a6e82600083612e14565b613ab88160405180606001604052806022815260200161495e6022913973ffffffffffffffffffffffffffffffffffffffff8516600090815260208190526040902054919061351f565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040902055600254613aeb9082612e8d565b60025560408051828152905160009173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600a5460009070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16820380613bb157600954613ba9906fffffffffffffffffffffffffffffffff80821691700100000000000000000000000000000000900416614450565b915050611a49565b600954600090613bf8906fffffffffffffffffffffffffffffffff16611519671bc16d674ec800005b600a54919004906fffffffffffffffffffffffffffffffff16614472565b600954909150600090613c3c9070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16612a31671bc16d674ec80000613bda565b9050613c8c613c857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8501611519671bc16d674ec800005b04670de0b6b3a764000003906144d3565b83906145a4565b9150613ccf613cc87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8501612a31671bc16d674ec80000613c74565b82906145a4565b9050613cdb8282614450565b95945050505050565b6000671480cc142da92a848210613d035750661550f7dca70000611a49565b670de0b6b3a76400008210613e0b576710a741a462780000821115613dac577fffffffffffffffffffffffffffffffffffffffffffffffffef58be5b9d88000082016000613d528260036144d3565b9050612710613d9b613d72846009680d8d726b7177a800005b04906145a4565b612f1f613d8b85601b69043c33c1937564800000613d6b565b6801fa48421ec7b1ed0990612e19565b81613da257fe5b0492505050611a49565b6710a741a4627800008290036000613dc58260036144d3565b9050612710613d9b613de2846009680d8d726b7177a80000613d6b565b610c92613dfb85601b69043c33c1937564800000613d6b565b6801fa48421ec7b1ed0990612e8d565b6000670b9a1192183a00008311613e2d57670b9a1192183a0000839003613e51565b7ffffffffffffffffffffffffffffffffffffffffffffffffff465ee6de7c6000083015b9050613e5e8160026144d3565b90506000613e87613e758365b5e620f48000612e19565b612f19674563918244f40000856137b5565b9050670b9a1192183a0000841115613eaf57612710613d9b6801161163ae0de59a9283612e19565b612710613d9b6801161163ae0de59a9283612e8d565b6000614e208263ffffffff1611613edd5750816112c7565b61c3508263ffffffff1611613efb57601e601484025b0490506112c7565b62030d408263ffffffff1611613f1657601e600a8402613ef3565b601e60048402613ef3565b6060613f83826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166145c09092919063ffffffff16565b805190915015612e1457808060200190516020811015613fa257600080fd5b5051612e14576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614ae5602a913960400191505060405180910390fd5b600080821161406957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161407257fe5b049392505050565b600a5460009070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1683038061417557600a5461410b906140d0906fffffffffffffffffffffffffffffffff1685612e19565b6040518060400160405280601a81526020017f766f6c756d6520657863656564732076616c69642072616e67650000000000008152506145d7565b600a80547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92831617905560095461416d9181811691700100000000000000000000000000000000900416614450565b9150506112c7565b600a546009546fffffffffffffffffffffffffffffffff918216916000916141a99116611519671bc16d674ec80000613bda565b6009549091506000906141ed9070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16612a31671bc16d674ec80000613bda565b9050614229613c857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8601611519671bc16d674ec80000613c74565b9150614265613cc87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8601612a31671bc16d674ec80000613c74565b90506142708261465b565b600980547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff929092169190911790556142ba8161465b565b600980546fffffffffffffffffffffffffffffffff9283167001000000000000000000000000000000000292169190911790556142f68661465b565b600a80547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff929092169190911790556143408761465b565b600a80546fffffffffffffffffffffffffffffffff9283167001000000000000000000000000000000000290831617905560408051848152602081018490529185168282015260608201869052517f96e2c334d3c0fa98c8b728ee84471864ffe5b28e05f46e52f8a469d0ab3a8b8b9181900360800190a16143c28282614450565b979650505050505050565b60006dffffffffffffffffffffffffffff82111561444c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f444d4d3a204f564552464c4f5700000000000000000000000000000000000000604482015290519081900360640190fd5b5090565b60008161445f575060006112c7565b81670de0b6b3a764000084028161407257fe5b6000670de0b6b3a7640000831061448557fe5b670de0b6b3a7640000826fffffffffffffffffffffffffffffffff168402856fffffffffffffffffffffffffffffffff1685670de0b6b3a7640000030201816144ca57fe5b04949350505050565b6000670de0b6b3a764000083111561454c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d6174684578743a2078203e20505245434953494f4e00000000000000000000604482015290519081900360640190fd5b6002820661456257670de0b6b3a7640000614564565b825b90506002820491505b81156112c757670de0b6b3a7640000838002049250600282061561459957670de0b6b3a7640000908302045b60028204915061456d565b6000670de0b6b3a76400006145b984846137b5565b8161407257fe5b60606145cf84846000856146dc565b949350505050565b6000816fffffffffffffffffffffffffffffffff841115614653576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181815283516024840152835190928392604490910191908501908083836000831561358d578181015183820152602001613575565b509192915050565b60006fffffffffffffffffffffffffffffffff82111561444c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6f766572666c6f772075696e7431323800000000000000000000000000000000604482015290519081900360640190fd5b606082471015614737576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806149c86026913960400191505060405180910390fd5b6147408561488c565b6147ab57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061481557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016147d8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614877576040519150601f19603f3d011682016040523d82523d6000602084013e61487c565b606091505b50915091506143c2828286614892565b3b151590565b606083156148a15750816113c9565b8251156148b15782518084602001fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181815284516024840152845185939192839260440191908501908083836000831561358d578181015183820152602001613575565b604051806080016040528060008152602001600081526020016000815260200160008152509056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c444d4d3a20494e53554646494349454e545f4c49515549444954595f4255524e4544536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365444d4d3a20494e53554646494349454e545f4c49515549444954595f4d494e54454445524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122048367b964f2c9a268e5a675a3fec6801c7a187b48c9098e18a1e0f26f4b9c2f564736f6c634300060c0033456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473a2646970667358221220ca5825e976bcd65cf0faa20f3f3a8283dcb82b2f4f7f63db5bc416e7ff14ac9b64736f6c634300060c0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000e85760003560e01c806365da9289116200008d578063ad5cb2e11162000063578063ad5cb2e11462000369578063eb787f6114620003a6578063efde4e64146200040257620000e8565b806365da928914620002a05780638fd6484014620002e6578063a2e74af6146200033357620000e8565b806341d1de9711620000c357806341d1de9714620001a0578063538633df14620001c05780635b1dc86f146200021057620000e8565b8063094b741514620000ed5780632900909d14620001205780633d82497e1462000162575b600080fd5b620000f76200040c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b62000160600480360360408110156200013857600080fd5b50803573ffffffffffffffffffffffffffffffffffffffff16906020013561ffff1662000428565b005b620000f7600480360360408110156200017a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516620005f9565b620000f760048036036020811015620001b857600080fd5b50356200062c565b620001fe60048036036040811015620001d857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351662000661565b60408051918252519081900360200190f35b6200024e600480360360408110156200022857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516620006a9565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156200028c57818101518382015260200162000272565b505050509050019250505060405180910390f35b620000f760048036036060811015620002b857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135620007c1565b620000f760048036036060811015620002fe57600080fd5b50803573ffffffffffffffffffffffffffffffffffffffff908116916020810135909116906040013563ffffffff1662000809565b62000160600480360360208110156200034b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662000d51565b6200037362000e51565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835261ffff90911660208301528051918290030190f35b620003ee60048036036060811015620003be57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101358216916040909101351662000e8c565b604080519115158252519081900360200190f35b620001fe62000ecc565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff163314620004af57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f444d4d3a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b60008161ffff16118015620004c957506107d08161ffff16105b6200053557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f444d4d3a20494e56414c49442046454500000000000000000000000000000000604482015290519081900360640190fd5b6000805461ffff83167401000000000000000000000000000000000000000081027fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff87167fffffffffffffffffffffffff00000000000000000000000000000000000000009094168417161790925560408051918252602082019290925281517fce65ee4e1b50c25affcecb736ecf577b5c46ff900efade2a6214267a8707628e929181900390910190a15050565b600360209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b600481815481106200063a57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526002602090815260408083209385168352929052908120620006a09062000ed2565b90505b92915050565b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600260209081526040808320938516835292905290812060609190620006ec9062000ed2565b90508067ffffffffffffffff811180156200070657600080fd5b5060405190808252806020026020018201604052801562000731578160200160208202803683370190505b50915060005b81811015620007b95773ffffffffffffffffffffffffffffffffffffffff80861660009081526002602090815260408083209388168352929052206200077e908262000edf565b8382815181106200078b57fe5b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260010162000737565b505092915050565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600260209081526040808320938616835292905290812062000801908362000edf565b949350505050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415620008a757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f444d4d3a204944454e544943414c5f4144445245535345530000000000000000604482015290519081900360640190fd5b6000808473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1610620008e6578486620008e9565b85855b909250905073ffffffffffffffffffffffffffffffffffffffff82166200097157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f444d4d3a205a45524f5f41444452455353000000000000000000000000000000604482015290519081900360640190fd5b6127108463ffffffff161015620009e957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f444d4d3a20494e56414c49445f42505300000000000000000000000000000000604482015290519081900360640190fd5b6127108463ffffffff1614158062000a33575073ffffffffffffffffffffffffffffffffffffffff8281166000908152600360209081526040808320858516845290915290205416155b62000a9f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f444d4d3a20554e414d504c49464945445f504f4f4c5f45584953545300000000604482015290519081900360640190fd5b60405162000aad9062001021565b604051809103906000f08015801562000aca573d6000803e3d6000fd5b5092508273ffffffffffffffffffffffffffffffffffffffff16636ecf2b228383876040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018263ffffffff1681526020019350505050600060405180830381600087803b15801562000b6357600080fd5b505af115801562000b78573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff808416600090815260026020908152604080832093861683529290522062000bba91508462000eed565b5073ffffffffffffffffffffffffffffffffffffffff808216600090815260026020908152604080832093861683529290522062000bf9908462000eed565b506127108463ffffffff16141562000c845773ffffffffffffffffffffffffffffffffffffffff8083166000818152600360208181526040808420878716855282528084208054968a167fffffffffffffffffffffffff0000000000000000000000000000000000000000978816811790915592825280842094845293905291902080549092161790555b6004805460018101825560008290527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805473ffffffffffffffffffffffffffffffffffffffff8087167fffffffffffffffffffffffff0000000000000000000000000000000000000000909216821790925591546040805193845263ffffffff88166020850152838101919091525183821692918516917ffc574402c445e75f2b79b67884ff9c662244dce454c5ae68935fcd0bebb7c8ff919081900360600190a350509392505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331462000dd857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f444d4d3a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915560408051918252517f66330d9620e4f36ed52d5f7b79fa819b71c33037004c3889a3601b06c68da7cc9181900360200190a150565b60005473ffffffffffffffffffffffffffffffffffffffff8116917401000000000000000000000000000000000000000090910461ffff1690565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600260209081526040808320938616835292905290812062000801908362000f11565b60045490565b6000620006a38262000f35565b6000620006a0838362000f39565b6000620006a08373ffffffffffffffffffffffffffffffffffffffff841662000fba565b6000620006a08373ffffffffffffffffffffffffffffffffffffffff841662001009565b5490565b8154600090821062000f97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018062005e296022913960400191505060405180910390fd5b82600001828154811062000fa757fe5b9060005260206000200154905092915050565b600062000fc8838362001009565b6200100057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620006a3565b506000620006a3565b60009081526001919091016020526040902054151590565b614df980620010308339019056fe60806040523480156200001157600080fd5b5060006040518060400160405280600b81526020016a04b79626572444d4d204c560ac1b815250604051806040016040528060068152602001650444d4d2d4c560d41b815250604051806040016040528060018152602001603160f81b815250828281600390805190602001906200008b929190620001ee565b508051620000a1906004906020840190620001ee565b50506005805460ff19166012179055508251602093840120815191840191909120604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818701528082019390935260608301919091524660808301523060a0808401919091528151808403909101815260c09092019052805192019190912060065550600160085560098054600160801b6001600160801b038085169182026001600160801b03199093169190911716179055620001624362000198565b600a80546001600160801b03928316600160801b02921691909117905550600b80546001600160a01b0319163317905562000280565b60006001600160801b03821115620001ea576040805162461bcd60e51b815260206004820152601060248201526f0deeccae4ccd8deee40ead2dce86264760831b604482015290519081900360640190fd5b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023157805160ff191683800117855562000261565b8280016001018555821562000261579182015b828111156200026157825182559160200191906001019062000244565b50620001ea9291505b80821115620001ea57600081556001016200026a565b614b6980620002906000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80637464fc3d11610104578063bc25cf77116100a2578063d669402711610071578063d669402714610736578063dd62ed3e14610780578063f698da25146107bb578063fff6cae9146107c3576101da565b8063bc25cf7714610695578063c45a0155146106c8578063d21220a7146106d0578063d505accf146106d8576101da565b806395d89b41116100de57806395d89b4114610613578063a457c2d71461061b578063a9059cbb14610654578063ba9a7a561461068d576101da565b80637464fc3d1461058c5780637ecebe001461059457806389afcb44146105c7576101da565b806323b872dd1161017c57806349386b161161014b57806349386b16146104bb5780636a627842146104dc5780636ecf2b221461050f57806370a0823114610559576101da565b806323b872dd1461041957806330adf81f1461045c578063313ce567146104645780633950935114610482576101da565b8063095ea7b3116101b8578063095ea7b31461033c5780630d94d50b146103895780630dfe1681146103ce57806318160ddd146103ff576101da565b8063022c0d9f146101df57806306fdde031461027a5780630902f1ac146102f7575b600080fd5b610278600480360360808110156101f557600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013516919081019060808101606082013564010000000081111561023957600080fd5b82018360208201111561024b57600080fd5b8035906020019184600183028401116401000000008311171561026d57600080fd5b5090925090506107cb565b005b610282610e6a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102bc5781810151838201526020016102a4565b50505050905090810190601f1680156102e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102ff611282565b60405180836dffffffffffffffffffffffffffff168152602001826dffffffffffffffffffffffffffff1681526020019250505060405180910390f35b6103756004803603604081101561035257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356112af565b604080519115158252519081900360200190f35b6103916112cd565b604080516fffffffffffffffffffffffffffffffff9586168152938516602085015291841683830152909216606082015290519081900360800190f35b6103d661130c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610407611328565b60408051918252519081900360200190f35b6103756004803603606081101561042f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013561132e565b6104076113d0565b61046c6113f4565b6040805160ff9092168252519081900360200190f35b6103756004803603604081101561049857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356113fd565b6104c3611458565b6040805163ffffffff9092168252519081900360200190f35b610407600480360360208110156104f257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611484565b6102786004803603606081101561052557600080fd5b50803573ffffffffffffffffffffffffffffffffffffffff908116916020810135909116906040013563ffffffff166118f4565b6104076004803603602081101561056f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611a22565b610407611a4e565b610407600480360360208110156105aa57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611a54565b6105fa600480360360208110156105dd57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611a66565b6040805192835260208301919091528051918290030190f35b61028261204f565b6103756004803603604081101561063157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135612397565b6103756004803603604081101561066a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561240c565b610407612420565b610278600480360360208110156106ab57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612426565b6103d6612648565b6103d6612664565b610278600480360360e08110156106ee57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135612680565b61073e61294c565b604080516dffffffffffffffffffffffffffff968716815294861660208601529285168484015293166060830152608082019290925290519081900360a00190f35b6104076004803603604081101561079657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166129e8565b610407612a20565b610278612a26565b6002600854141561083d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600855841515806108505750600084115b6108bb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f444d4d3a20494e53554646494349454e545f4f55545055545f414d4f554e5400604482015290519081900360640190fd5b60006108c5614912565b6108cd612ce3565b80519193509150871080156108e55750806020015186105b61095057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f444d4d3a20494e53554646494349454e545f4c49515549444954590000000000604482015290519081900360640190fd5b610958614912565b600c54600d5473ffffffffffffffffffffffffffffffffffffffff9182169190811690881682148015906109b857508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614155b610a2357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f444d4d3a20494e56414c49445f544f0000000000000000000000000000000000604482015290519081900360640190fd5b8915610a4a57610a4a73ffffffffffffffffffffffffffffffffffffffff8316898c612d87565b8815610a7157610a7173ffffffffffffffffffffffffffffffffffffffff8216898b612d87565b8515610b3d578773ffffffffffffffffffffffffffffffffffffffff166381279c7e338c8c8b8b6040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610b2457600080fd5b505af1158015610b38573d6000803e3d6000fd5b505050505b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b158015610ba957600080fd5b505afa158015610bbd573d6000803e3d6000fd5b505050506040513d6020811015610bd357600080fd5b50518352604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8316916370a08231916024808301926020929190829003018186803b158015610c4357600080fd5b505afa158015610c57573d6000803e3d6000fd5b505050506040513d6020811015610c6d57600080fd5b505160208401528415610cc157835183516040860151610c989291610c929190612e19565b90612e8d565b6040840152602080850151908401516060860151610cbb9291610c929190612e19565b60608401525b5050815181516000918a900310610cd9576000610ce4565b82518251908a900390035b9050600088846020015103836020015111610d00576000610d0e565b888460200151038360200151035b90506000821180610d1f5750600081115b610d8a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f444d4d3a20494e53554646494349454e545f494e5055545f414d4f554e540000604482015290519081900360640190fd5b6000610de4838388610d9d578751610da3565b87604001515b89610db2578860200151610db8565b88606001515b8a610dc4578851610dca565b88604001515b8b610dd9578960200151610ddf565b89606001515b612f04565b9050610df08685613069565b60408051848152602081018490528082018d9052606081018c905260808101839052905173ffffffffffffffffffffffffffffffffffffffff8b169133917f606ecd02b3e3b4778f8e97b2e03351de14224efaa5fa64e62200afc9395c24999181900360a00190a350506001600855505050505050505050565b600c54600d54604080517f95d89b41000000000000000000000000000000000000000000000000000000008152905160609373ffffffffffffffffffffffffffffffffffffffff90811693169183916395d89b4191600480820192600092909190829003018186803b158015610edf57600080fd5b505afa158015610ef3573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526020811015610f3a57600080fd5b8101908080516040519392919084640100000000821115610f5a57600080fd5b908301906020820185811115610f6f57600080fd5b8251640100000000811182820188101715610f8957600080fd5b82525081516020918201929091019080838360005b83811015610fb6578181015183820152602001610f9e565b50505050905090810190601f168015610fe35780820380516001836020036101000a031916815260200191505b506040525050508173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561103057600080fd5b505afa158015611044573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561108b57600080fd5b81019080805160405193929190846401000000008211156110ab57600080fd5b9083019060208201858111156110c057600080fd5b82516401000000008111828201881017156110da57600080fd5b82525081516020918201929091019080838360005b838110156111075781810151838201526020016110ef565b50505050905090810190601f1680156111345780820380516001836020036101000a031916815260200191505b5060405250505060405160200180807f4b79626572444d4d204c50200000000000000000000000000000000000000000815250600c0183805190602001908083835b602083106111b357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611176565b6001836020036101000a038019825116818451168082178552505050505050905001807f2d0000000000000000000000000000000000000000000000000000000000000081525060010182805190602001908083835b6020831061124657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611209565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529250505090565b600e546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000009092041690565b60006112c36112bc613204565b8484613208565b5060015b92915050565b600954600a546fffffffffffffffffffffffffffffffff8083169370010000000000000000000000000000000093849004821693838316930490911690565b600c5473ffffffffffffffffffffffffffffffffffffffff1681565b60025490565b600061133b84848461334f565b6113c584611347613204565b6113c085604051806060016040528060288152602001614a316028913973ffffffffffffffffffffffffffffffffffffffff8a16600090815260016020526040812090611392613204565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002054919061351f565b613208565b5060015b9392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60055460ff1690565b60006112c361140a613204565b846113c0856001600061141b613204565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c168152925290205490612e19565b600e547c0100000000000000000000000000000000000000000000000000000000900463ffffffff1681565b6000600260085414156114f857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026008556000611507614912565b61150f612ce3565b9150915061151b614912565b600c54604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561158c57600080fd5b505afa1580156115a0573d6000803e3d6000fd5b505050506040513d60208110156115b657600080fd5b50518152600d54604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561162b57600080fd5b505afa15801561163f573d6000803e3d6000fd5b505050506040513d602081101561165557600080fd5b505160208201528151815160009161166d9190612e8d565b9050600061168c84602001518460200151612e8d90919063ffffffff16565b9050600061169a86866135d0565b905060006116a6611328565b90508061177457861561172957600e54855163ffffffff7c0100000000000000000000000000000000000000000000000000000000909204821691612710916116f19184906137b516565b816116f857fe5b04604087015260208601516127109061171a9063ffffffff808516906137b516565b8161172157fe5b046060870152505b6117416103e8610c9261173c87876137b5565b613828565b975061176f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6103e8613879565b611827565b85516117b19061178486846137b5565b8161178b57fe5b0487602001516117a484876137b590919063ffffffff16565b816117ab57fe5b046139aa565b975086156118275760006117c58983612e19565b90506117f4826117e2838a604001516137b590919063ffffffff16565b816117e957fe5b0487600001516139c0565b6040870152606087015161182090839061180e90846137b5565b8161181557fe5b0487602001516139c0565b6060870152505b60008811611880576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180614a596022913960400191505060405180910390fd5b61188a8989613879565b6118948786613069565b81156118a8576118a487866139d0565b6010555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600855509395945050505050565b600b5473ffffffffffffffffffffffffffffffffffffffff16331461197a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f444d4d3a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600c805473ffffffffffffffffffffffffffffffffffffffff9485167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600d805493909416921691909117909155600e805463ffffffff9092167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260409020545b919050565b60105481565b60076020526000908152604090205481565b60008060026008541415611adb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026008556000611aea614912565b611af2612ce3565b600c54600d54604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905194965092945073ffffffffffffffffffffffffffffffffffffffff9182169391169160009184916370a08231916024808301926020929190829003018186803b158015611b7357600080fd5b505afa158015611b87573d6000803e3d6000fd5b505050506040513d6020811015611b9d57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916370a08231916024808301926020929190829003018186803b158015611c1157600080fd5b505afa158015611c25573d6000803e3d6000fd5b505050506040513d6020811015611c3b57600080fd5b505185519091508210801590611c55575084602001518110155b611cc057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f444d4d3a20554e53594e435f5245534552564553000000000000000000000000604482015290519081900360640190fd5b6000611ccb30611a22565b90506000611cd988886135d0565b90506000611ce5611328565b905080611cf284876137b5565b81611cf957fe5b049a5080611d0784866137b5565b81611d0e57fe5b04995060008b1180611d20575060008a115b611d75576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806149ee6022913960400191505060405180910390fd5b611d7f30846139f6565b8a15611da657611da673ffffffffffffffffffffffffffffffffffffffff88168d8d612d87565b8915611dcd57611dcd73ffffffffffffffffffffffffffffffffffffffff87168d8c612d87565b611dd5614912565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8a16916370a08231916024808301926020929190829003018186803b158015611e4157600080fd5b505afa158015611e55573d6000803e3d6000fd5b505050506040513d6020811015611e6b57600080fd5b50518152604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8916916370a08231916024808301926020929190829003018186803b158015611edb57600080fd5b505afa158015611eef573d6000803e3d6000fd5b505050506040513d6020811015611f0557600080fd5b505160208201528915611fad5788518151600091611f4b91611f2790866137b5565b81611f2e57fe5b048b602001516117a48686602001516137b590919063ffffffff16565b9050611f7a83611f68838d604001516137b590919063ffffffff16565b81611f6f57fe5b0483600001516139c0565b604083015260608a0151611fa6908490611f9490846137b5565b81611f9b57fe5b0483602001516139c0565b6060830152505b611fb78a82613069565b8215611fcb57611fc78a826139d0565b6010555b8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968e8e604051808381526020018281526020019250505060405180910390a3505050505050505050506001600881905550915091565b600c54600d54604080517f95d89b41000000000000000000000000000000000000000000000000000000008152905160609373ffffffffffffffffffffffffffffffffffffffff90811693169183916395d89b4191600480820192600092909190829003018186803b1580156120c457600080fd5b505afa1580156120d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561211f57600080fd5b810190808051604051939291908464010000000082111561213f57600080fd5b90830190602082018581111561215457600080fd5b825164010000000081118282018810171561216e57600080fd5b82525081516020918201929091019080838360005b8381101561219b578181015183820152602001612183565b50505050905090810190601f1680156121c85780820380516001836020036101000a031916815260200191505b506040525050508173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561221557600080fd5b505afa158015612229573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561227057600080fd5b810190808051604051939291908464010000000082111561229057600080fd5b9083019060208201858111156122a557600080fd5b82516401000000008111828201881017156122bf57600080fd5b82525081516020918201929091019080838360005b838110156122ec5781810151838201526020016122d4565b50505050905090810190601f1680156123195780820380516001836020036101000a031916815260200191505b5060405250505060405160200180807f444d4d2d4c5020000000000000000000000000000000000000000000000000008152506007018380519060200190808383602083106111b357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611176565b60006112c36123a4613204565b846113c085604051806060016040528060258152602001614b0f60259139600160006123ce613204565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d1681529252902054919061351f565b60006112c3612419613204565b848461334f565b6103e881565b6002600854141561249857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600855600e54600c54604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905161257f93859361255f936dffffffffffffffffffffffffffff9092169273ffffffffffffffffffffffffffffffffffffffff909116916370a08231916024808301926020929190829003018186803b15801561252d57600080fd5b505afa158015612541573d6000803e3d6000fd5b505050506040513d602081101561255757600080fd5b505190612e8d565b600c5473ffffffffffffffffffffffffffffffffffffffff169190612d87565b600e54600d54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051612640938593612620936e0100000000000000000000000000009092046dffffffffffffffffffffffffffff169273ffffffffffffffffffffffffffffffffffffffff909116916370a08231916024808301926020929190829003018186803b15801561252d57600080fd5b600d5473ffffffffffffffffffffffffffffffffffffffff169190612d87565b506001600855565b600b5473ffffffffffffffffffffffffffffffffffffffff1681565b600d5473ffffffffffffffffffffffffffffffffffffffff1681565b428410156126ef57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f45524332305065726d69743a2045585049524544000000000000000000000000604482015290519081900360640190fd5b60065473ffffffffffffffffffffffffffffffffffffffff80891660008181526007602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa158015612850573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158015906128cb57508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b61293657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f45524332305065726d69743a20494e56414c49445f5349474e41545552450000604482015290519081900360640190fd5b612941898989613208565b505050505050505050565b600e54600f546dffffffffffffffffffffffffffff808316926e0100000000000000000000000000008082048316938381169391900416906000907c0100000000000000000000000000000000000000000000000000000000900463ffffffff166127108114156129be578593508492505b60006129c943613b40565b90506129dd6129d782613ce4565b83613ec5565b925050509091929394565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60065481565b60026008541415612a9857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026008556000612aa7614912565b612aaf612ce3565b915091506000612abf83836135d0565b9050612ac9614912565b600c54604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015612b3a57600080fd5b505afa158015612b4e573d6000803e3d6000fd5b505050506040513d6020811015612b6457600080fd5b50518152600d54604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015612bd957600080fd5b505afa158015612bed573d6000803e3d6000fd5b505050506040513d6020811015612c0357600080fd5b505160208201528315612cba576000612c1a611328565b84518351919250600091612c579190612c3390856137b5565b81612c3a57fe5b0486602001516117a48587602001516137b590919063ffffffff16565b9050612c8682612c748388604001516137b590919063ffffffff16565b81612c7b57fe5b0484600001516139c0565b60408401526060850151612cb2908390612ca090846137b5565b81612ca757fe5b0484602001516139c0565b606084015250505b612cc48482613069565b8115612cd857612cd484826139d0565b6010555b505060016008555050565b6000612ced614912565b600e546dffffffffffffffffffffffffffff80821683526e010000000000000000000000000000820416602083015263ffffffff7c0100000000000000000000000000000000000000000000000000000000909104166127101480159250612d8357600f546dffffffffffffffffffffffffffff80821660408401526e0100000000000000000000000000009091041660608201525b9091565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052612e14908490613f21565b505050565b6000828201838110156113c957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082821115612efe57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600080612f2588612f1f87612f198a8c6137b5565b90613ff9565b90612e19565b90506000612f33438361407a565b9050612f6f612f4182613ce4565b600e547c0100000000000000000000000000000000000000000000000000000000900463ffffffff16613ec5565b92506000612f8586670de0b6b3a76400006137b5565b9050612f9b612f948b866137b5565b8290612e8d565b9050670de0b6b3a7640000810490506000612fbe86670de0b6b3a76400006137b5565b9050612fcd612f948b876137b5565b670de0b6b3a764000090049050612fe489896137b5565b612fee83836137b5565b101561305b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f444d4d3a204b0000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b505050509695505050505050565b8051613074906143cd565b600e80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff9290921691909117905560208101516130c1906143cd565b600e806101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff16021790555081156131ac57805160408201511080159061311757508060200151816060015110155b61311d57fe5b61312a81604001516143cd565b600f80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff929092169190911790556060810151613177906143cd565b600f600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff1602179055505b6040808201516060808401518451602080870151865195865290850192909252838501529082015290517f2f9d55abfefdfd4c3a83e00a1b419b3c2fe4b83100c559f0e2213e57f6e0bba99181900360800190a15050565b3390565b73ffffffffffffffffffffffffffffffffffffffff8316613274576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180614ac16024913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166132e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806149806022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff83166133bb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180614a9c6025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216613427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061493b6023913960400191505060405180910390fd5b613432838383612e14565b61347c816040518060600160405280602681526020016149a26026913973ffffffffffffffffffffffffffffffffffffffff8616600090815260208190526040902054919061351f565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526020819052604080822093909355908416815220546134b89082612e19565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156135c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561358d578181015183820152602001613575565b50505050905090810190601f1680156135ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000806000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5cb2e16040518163ffffffff1660e01b8152600401604080518083038186803b15801561363c57600080fd5b505afa158015613650573d6000803e3d6000fd5b505050506040513d604081101561366657600080fd5b50805160209091015160105473ffffffffffffffffffffffffffffffffffffffff83161515955091935091506000866136a05785516136a6565b85604001515b90506000876136b95786602001516136bf565b86606001515b9050851561379e578215613799576000838302848482816136dc57fe5b041415613701576136fa6136f361173c8386613ff9565b8590612e8d565b915061371e565b61371b6136f361173c866137158988613ff9565b906137b5565b91505b600061374661373e85612f19888e602001516137b590919063ffffffff16565b8b5190612e19565b9050600061375e8861ffff1661371586613715611328565b905060006137726113886137158588612e8d565b9050600081838161377f57fe5b0490508015613792576137928b82613879565b5050505050505b6137aa565b82156137aa5760006010555b505050505092915050565b6000826137c4575060006112c7565b828202828482816137d157fe5b04146113c9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180614a106021913960400191505060405180910390fd5b6000600382111561386b575080600160028204015b818110156138655780915060028182858161385457fe5b04018161385d57fe5b04905061383d565b50611a49565b8115611a4957506001919050565b73ffffffffffffffffffffffffffffffffffffffff82166138fb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61390760008383612e14565b6002546139149082612e19565b60025573ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260409020546139479082612e19565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106139b957816113c9565b5090919050565b6000818310156139b957816113c9565b6000826139e45760208201518251026113c9565b50606081015160409091015102919050565b73ffffffffffffffffffffffffffffffffffffffff8216613a62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180614a7b6021913960400191505060405180910390fd5b613a6e82600083612e14565b613ab88160405180606001604052806022815260200161495e6022913973ffffffffffffffffffffffffffffffffffffffff8516600090815260208190526040902054919061351f565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040902055600254613aeb9082612e8d565b60025560408051828152905160009173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600a5460009070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16820380613bb157600954613ba9906fffffffffffffffffffffffffffffffff80821691700100000000000000000000000000000000900416614450565b915050611a49565b600954600090613bf8906fffffffffffffffffffffffffffffffff16611519671bc16d674ec800005b600a54919004906fffffffffffffffffffffffffffffffff16614472565b600954909150600090613c3c9070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16612a31671bc16d674ec80000613bda565b9050613c8c613c857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8501611519671bc16d674ec800005b04670de0b6b3a764000003906144d3565b83906145a4565b9150613ccf613cc87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8501612a31671bc16d674ec80000613c74565b82906145a4565b9050613cdb8282614450565b95945050505050565b6000671480cc142da92a848210613d035750661550f7dca70000611a49565b670de0b6b3a76400008210613e0b576710a741a462780000821115613dac577fffffffffffffffffffffffffffffffffffffffffffffffffef58be5b9d88000082016000613d528260036144d3565b9050612710613d9b613d72846009680d8d726b7177a800005b04906145a4565b612f1f613d8b85601b69043c33c1937564800000613d6b565b6801fa48421ec7b1ed0990612e19565b81613da257fe5b0492505050611a49565b6710a741a4627800008290036000613dc58260036144d3565b9050612710613d9b613de2846009680d8d726b7177a80000613d6b565b610c92613dfb85601b69043c33c1937564800000613d6b565b6801fa48421ec7b1ed0990612e8d565b6000670b9a1192183a00008311613e2d57670b9a1192183a0000839003613e51565b7ffffffffffffffffffffffffffffffffffffffffffffffffff465ee6de7c6000083015b9050613e5e8160026144d3565b90506000613e87613e758365b5e620f48000612e19565b612f19674563918244f40000856137b5565b9050670b9a1192183a0000841115613eaf57612710613d9b6801161163ae0de59a9283612e19565b612710613d9b6801161163ae0de59a9283612e8d565b6000614e208263ffffffff1611613edd5750816112c7565b61c3508263ffffffff1611613efb57601e601484025b0490506112c7565b62030d408263ffffffff1611613f1657601e600a8402613ef3565b601e60048402613ef3565b6060613f83826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166145c09092919063ffffffff16565b805190915015612e1457808060200190516020811015613fa257600080fd5b5051612e14576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614ae5602a913960400191505060405180910390fd5b600080821161406957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161407257fe5b049392505050565b600a5460009070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1683038061417557600a5461410b906140d0906fffffffffffffffffffffffffffffffff1685612e19565b6040518060400160405280601a81526020017f766f6c756d6520657863656564732076616c69642072616e67650000000000008152506145d7565b600a80547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92831617905560095461416d9181811691700100000000000000000000000000000000900416614450565b9150506112c7565b600a546009546fffffffffffffffffffffffffffffffff918216916000916141a99116611519671bc16d674ec80000613bda565b6009549091506000906141ed9070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16612a31671bc16d674ec80000613bda565b9050614229613c857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8601611519671bc16d674ec80000613c74565b9150614265613cc87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8601612a31671bc16d674ec80000613c74565b90506142708261465b565b600980547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff929092169190911790556142ba8161465b565b600980546fffffffffffffffffffffffffffffffff9283167001000000000000000000000000000000000292169190911790556142f68661465b565b600a80547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff929092169190911790556143408761465b565b600a80546fffffffffffffffffffffffffffffffff9283167001000000000000000000000000000000000290831617905560408051848152602081018490529185168282015260608201869052517f96e2c334d3c0fa98c8b728ee84471864ffe5b28e05f46e52f8a469d0ab3a8b8b9181900360800190a16143c28282614450565b979650505050505050565b60006dffffffffffffffffffffffffffff82111561444c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f444d4d3a204f564552464c4f5700000000000000000000000000000000000000604482015290519081900360640190fd5b5090565b60008161445f575060006112c7565b81670de0b6b3a764000084028161407257fe5b6000670de0b6b3a7640000831061448557fe5b670de0b6b3a7640000826fffffffffffffffffffffffffffffffff168402856fffffffffffffffffffffffffffffffff1685670de0b6b3a7640000030201816144ca57fe5b04949350505050565b6000670de0b6b3a764000083111561454c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d6174684578743a2078203e20505245434953494f4e00000000000000000000604482015290519081900360640190fd5b6002820661456257670de0b6b3a7640000614564565b825b90506002820491505b81156112c757670de0b6b3a7640000838002049250600282061561459957670de0b6b3a7640000908302045b60028204915061456d565b6000670de0b6b3a76400006145b984846137b5565b8161407257fe5b60606145cf84846000856146dc565b949350505050565b6000816fffffffffffffffffffffffffffffffff841115614653576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181815283516024840152835190928392604490910191908501908083836000831561358d578181015183820152602001613575565b509192915050565b60006fffffffffffffffffffffffffffffffff82111561444c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6f766572666c6f772075696e7431323800000000000000000000000000000000604482015290519081900360640190fd5b606082471015614737576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806149c86026913960400191505060405180910390fd5b6147408561488c565b6147ab57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061481557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016147d8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614877576040519150601f19603f3d011682016040523d82523d6000602084013e61487c565b606091505b50915091506143c2828286614892565b3b151590565b606083156148a15750816113c9565b8251156148b15782518084602001fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181815284516024840152845185939192839260440191908501908083836000831561358d578181015183820152602001613575565b604051806080016040528060008152602001600081526020016000815260200160008152509056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c444d4d3a20494e53554646494349454e545f4c49515549444954595f4255524e4544536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365444d4d3a20494e53554646494349454e545f4c49515549444954595f4d494e54454445524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122048367b964f2c9a268e5a675a3fec6801c7a187b48c9098e18a1e0f26f4b9c2f564736f6c634300060c0033456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473a2646970667358221220ca5825e976bcd65cf0faa20f3f3a8283dcb82b2f4f7f63db5bc416e7ff14ac9b64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2995,
        "contract": "contracts/DMMFactory.sol:DMMFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2997,
        "contract": "contracts/DMMFactory.sol:DMMFactory",
        "label": "governmentFeeBps",
        "offset": 20,
        "slot": "0",
        "type": "t_uint16"
      },
      {
        "astId": 3000,
        "contract": "contracts/DMMFactory.sol:DMMFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3006,
        "contract": "contracts/DMMFactory.sol:DMMFactory",
        "label": "tokenPools",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_contract(IERC20)1118,t_mapping(t_contract(IERC20)1118,t_struct(AddressSet)1926_storage))"
      },
      {
        "astId": 3013,
        "contract": "contracts/DMMFactory.sol:DMMFactory",
        "label": "getUnamplifiedPool",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_contract(IERC20)1118,t_mapping(t_contract(IERC20)1118,t_address))"
      },
      {
        "astId": 3017,
        "contract": "contracts/DMMFactory.sol:DMMFactory",
        "label": "allPools",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1118": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)1118,t_address)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_contract(IERC20)1118,t_mapping(t_contract(IERC20)1118,t_address))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => mapping(contract IERC20 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)1118,t_address)"
      },
      "t_mapping(t_contract(IERC20)1118,t_mapping(t_contract(IERC20)1118,t_struct(AddressSet)1926_storage))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => mapping(contract IERC20 => struct EnumerableSet.AddressSet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)1118,t_struct(AddressSet)1926_storage)"
      },
      "t_mapping(t_contract(IERC20)1118,t_struct(AddressSet)1926_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1926_storage"
      },
      "t_struct(AddressSet)1926_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1925,
            "contract": "contracts/DMMFactory.sol:DMMFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1661_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1661_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1656,
            "contract": "contracts/DMMFactory.sol:DMMFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1660,
            "contract": "contracts/DMMFactory.sol:DMMFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}